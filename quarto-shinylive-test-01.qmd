---
title: "Quarto Shinylive test, example 01"
format: 
  html:
    toc: true
editor: visual
filters:
  - shinylive
execute: 
  echo: false
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(scales)
library(lubridate)
library(DT)
library(here)
library(shinylive)

```

## Quarto + Shinylive

Taking Quarto docs to the next level by embedding live, fully interactive Shiny apps!

To learn more about Quarto see <https://quarto.org>.

To learn more about Shinylive see <https://github.com/posit-dev/r-shinylive>

***Note:** this project set up using '.renv' which is good for reproducibility, but may cause complications for package management on different machines over time.*

## Swiss Info data

R built-in example data on social indicators by region.

```{r data}
swiss <- swiss
swiss$reg <- rownames(swiss)
swiss_top <- swiss %>% arrange(-Fertility) %>% slice_head(n=6)
# save with relative location
write_csv(swiss_top, 'data/swiss_top.csv')
```

## Visualize

```{r}
swiss_top %>% ggplot(aes(x=reg, y=Fertility))+geom_col()+
  labs(title='Top 6 Regions by Fertility', x="")+
  theme_light()
```

## Now with Shiny!

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600 # seems to have to manually set viewer height, with trial/error

# load packages
library(shiny)
library(datasets)
library(tidyverse)
library(here)

# get data - import saved file with relative location
#| file: data/swiss_top.csv

# Define shiny ui
ui <- fluidPage(
  # shiny UI components here
  # Application title
  titlePanel("Swiss data"),
  
  # Sidebar layout with input and output definitions
  sidebarLayout(
    # Sidebar panel for inputs
    sidebarPanel(
      # Input: checkbox for the regions to plot
      checkboxGroupInput(inputId = "regs",
                         label = "Choose region:",
                         choices = list("Broye" = "Broye",
                                        "Franches-Mnt" = "Franches-Mnt",
                                        "Glane" = "Glane",
                                        "Moutier" = "Moutier",
                                        "Sierre" = "Sierre",
                                        "Veveyse" = "Veveyse"),
                         selected = c("Broye","Franches-Mnt","Glane","Moutier",
                                      "Sierre","Veveyse"))
    ),
    
    # Main panel for displaying outputs
    mainPanel(
      h3('Swiss Chart'),
      # Output: Column chart rendered with ggplot2
      plotOutput(outputId = "fert")
    )
  )
)

# Define shiny server logic here  
server <- function(input, output, session) {
  # shiny server code
  # Reactive expression to generate the plot based on the input$var
  output$fert <- renderPlot({
    # Your data processing and plotting logic here
    # This will need to be updated based on how you want to use input$var

    # Sample data
    swiss <- swiss
    swiss$reg <- rownames(swiss)
    swiss_top <- swiss %>% arrange(-Fertility) %>% slice_head(n=6) %>%
      filter(reg %in% input$regs)

    # Generate ggplot2 column chart
    swiss_top |> ggplot(aes(x=reg, y=Fertility))+geom_col()+
      labs(title='Top 6 Regions by Fertility', x="")+
      theme_light()
   })
}

# create and launch shiny app
shinyApp(ui = ui, server = server)

```
